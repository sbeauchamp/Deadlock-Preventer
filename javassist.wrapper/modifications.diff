Only in E:\downloads\javassist-3.12.GA\javassist-3.12.GA\src\main: META-INF
diff -r E:\deadlock_preventer\javassist\src/javassist/CtBehavior.java E:\downloads\javassist-3.12.GA\javassist-3.12.GA\src\main/javassist/CtBehavior.java
32,35d31
<     public interface CodeInserter {
<     	public void insert(Bytecode code, int pos);
<     }
<     
293,295d288
<     boolean isPrimitiveReturnType() {
<         return Descriptor.isPrimitiveReturnType(methodInfo.getDescriptor());
<     }
695,725d687
<     public void insertBefore(CodeInserter inserter, boolean rebuild) throws CannotCompileException {
<         CtClass cc = declaringClass;
<         cc.checkModify();
<         CodeAttribute ca = methodInfo.getCodeAttribute();
<         if (ca == null)
<             throw new CannotCompileException("no method body");
< 
< 		ConstPool cp = methodInfo.getConstPool();
<         CodeIterator iterator = ca.iterator();
<         try {
<     		Bytecode b = new Bytecode(cp, 1, 0);
<     		inserter.insert(b, iterator.lookAhead());
<             int stack = b.getMaxStack();
<             int locals = b.getMaxLocals();
< 
<             if (stack > ca.getMaxStack())
<                 ca.setMaxStack(stack);
< 
<             if (locals > ca.getMaxLocals())
<                 ca.setMaxLocals(locals);
< 
<             int pos = iterator.insertEx(b.get());
<             iterator.insert(b.getExceptionTable(), pos);
<             if (rebuild)
<                 methodInfo.rebuildStackMapIf6(cc.getClassPool(), cc.getClassFile2());
<         }
<         catch (BadBytecode e) {
<             throw new CannotCompileException(e);
<         }
<     }
< 
864,940d825
<     public void insertAfter(CodeInserter toInsert, boolean asFinally, boolean rebuild)
<     	throws CannotCompileException
<     {
< 		CtClass cc = declaringClass;
< 		cc.checkModify();
< 		ConstPool pool = methodInfo.getConstPool();
< 		CodeAttribute ca = methodInfo.getCodeAttribute();
< 		if (ca == null)
< 			throw new CannotCompileException("no method body");
< 
< 		CodeIterator iterator = ca.iterator();
< 		int retAddr = ca.getMaxLocals();
< 		Bytecode b = new Bytecode(pool, 0, retAddr + 1);
< 		b.setStackDepth(ca.getMaxStack() + 1);
< 		try {
< 			CtClass rtype = null;
< 			boolean isPrimitive = isPrimitiveReturnType();
< 			if (isPrimitive)
< 				rtype = getReturnType0();
< 			
< 			int varNo = b.getMaxLocals();
< 			
< 			int varLength = 1;
< 			if (isPrimitiveReturnType()) {
< 				char c = ((CtPrimitiveType) rtype).getDescriptor();
< 				if (c == 'D' || c == 'J') // double and longs
< 					varLength += 1;
< 			}
< 			b.setMaxLocals(varNo + varLength);
< 			
< 			int oldPos = iterator.lookAhead();
< 			iterator.move(iterator.getCodeLength());
< 			// finally clause for exceptions
< 			int handlerLen = insertAfterHandler(asFinally, b, isPrimitive, rtype, varNo, toInsert, iterator);
< 			// finally clause for normal termination
< 			insertAfterAdvice(b, toInsert, isPrimitive, rtype, varNo, iterator);
< 
< 			iterator.move(oldPos);
< 			
< 			ca.setMaxStack(b.getMaxStack());
< 			ca.setMaxLocals(b.getMaxLocals());
< 
< 			int gapPos = iterator.append(b.get());
< 			iterator.append(b.getExceptionTable(), gapPos);
< 
< 			if (asFinally)
< 				ca.getExceptionTable().add(getStartPosOfBody(ca), gapPos,
< 						gapPos, 0);
< 
< 			int gapLen = iterator.getCodeLength() - gapPos - handlerLen;
< 			int subr = iterator.getCodeLength() - gapLen;
< 
< 			while (iterator.hasNext()) {
< 				int pos = iterator.next();
< 				if (pos >= subr)
< 					break;
< 
< 				int c = iterator.byteAt(pos);
< 				if (c == Opcode.ARETURN || c == Opcode.IRETURN
< 						|| c == Opcode.FRETURN || c == Opcode.LRETURN
< 						|| c == Opcode.DRETURN || c == Opcode.RETURN) {
< 					insertGoto(iterator, subr, pos);
< 					subr = iterator.getCodeLength() - gapLen;
< 				}
< 			}
< 
< 			if (rebuild)
< 				methodInfo.rebuildStackMapIf6(cc.getClassPool(), cc.getClassFile2());
< 		} catch (NotFoundException e) {
< 			throw new CannotCompileException(e);
< 		} catch (CompileError e) {
< 			throw new CannotCompileException(e);
< 		} catch (BadBytecode e) {
< 			throw new CannotCompileException(e);
< 		}
< 	}
< 
942c827
<             ConstPool cp, CtClass rtype, int varNo)
---
>                                    ConstPool cp, CtClass rtype, int varNo)
964,989d848
< 	private void insertAfterAdvice(Bytecode code, CodeInserter toInsert,
< 			boolean isPrimitive, CtClass rtype, int varNo, CodeIterator iterator) throws CompileError {
< 		if (rtype == CtClass.voidType) {
< 			code.addOpcode(Opcode.ACONST_NULL);
< 			code.addAstore(varNo);
< 			toInsert.insert(code, iterator.lookAhead());
< 			code.addOpcode(Opcode.RETURN);
< 			if (code.getMaxLocals() < 1)
< 				code.setMaxLocals(1);
< 		} else {
< 			if (isPrimitive)
< 				code.addStore(varNo, rtype);
< 			else
< 				code.addAstore(varNo);
< 			toInsert.insert(code, iterator.lookAhead());
< 			if (isPrimitive)
< 				code.addLoad(varNo, rtype);
< 			else
< 				code.addAload(varNo);
< 			if (isPrimitive)
< 				code.addOpcode(((CtPrimitiveType) rtype).getReturnOp());
< 			else
< 				code.addOpcode(Opcode.ARETURN);
< 		}
< 	}
< 
1021c880
<                                    Javac jv, String src)
---
>                                    Javac javac, String src)
1059c918
<         jv.compileStmnt(src);
---
>         javac.compileStmnt(src);
1064,1102d922
< 
< 	private int insertAfterHandler(boolean asFinally, Bytecode b, boolean isPrimitive,
< 			CtClass rtype, int returnVarNo, CodeInserter toInsert, CodeIterator iterator)
< 			throws CompileError {
< 		if (!asFinally)
< 			return 0;
< 
< 		int var = b.getMaxLocals();
< 		b.incMaxLocals(1);
< 		int pc = b.currentPc();
< 		b.addAstore(var); // store an exception
< 		if (isPrimitive) {
< 			char c = ((CtPrimitiveType) rtype).getDescriptor();
< 			if (c == 'D') {
< 				b.addDconst(0.0);
< 				b.addDstore(returnVarNo);
< 			} else if (c == 'F') {
< 				b.addFconst(0);
< 				b.addFstore(returnVarNo);
< 			} else if (c == 'J') {
< 				b.addLconst(0);
< 				b.addLstore(returnVarNo);
< 			} else if (c == 'V') {
< 				b.addOpcode(Opcode.ACONST_NULL);
< 				b.addAstore(returnVarNo);
< 			} else { // int, boolean, char, short, ...
< 				b.addIconst(0);
< 				b.addIstore(returnVarNo);
< 			}
< 		} else {
< 			b.addOpcode(Opcode.ACONST_NULL);
< 			b.addAstore(returnVarNo);
< 		}
< 
< 		toInsert.insert(b, iterator.lookAhead());
< 		b.addAload(var);
< 		b.addOpcode(Opcode.ATHROW);
< 		return b.currentPc() - pc;
< 	}
diff -r E:\deadlock_preventer\javassist\src/javassist/bytecode/Bytecode.java E:\downloads\javassist-3.12.GA\javassist-3.12.GA\src\main/javassist/bytecode/Bytecode.java
468,476d467
<      * Appends ATHROW
<      *
<      * @param n         an index into the local variable array.
<      */
<     public void addAthrow() {
<     	addOpcode(ATHROW);
<     }
< 
<     /**
496,503d486
<      * Appends DUP
<      * 
<      */
<     public void addDup() {
<     	addOpcode(DUP);
<     }
< 
<     /**
522,548d504
<     }
< 
<     /**
<      * Appends GOTO or GOTO_W
<      *
<      * @param n         the pushed integer constant.
<      */
<     public void addGoto(int n) {
<         if (n <= 32767) {
<             addOpcode(GOTO);
<             add(n >> 8);
<             add(n);
<         }
<         else {
<             addOpcode(GOTO_W);
<             add32bit(n);
<         }
<     }
< 
<     /**
<      * Appends GOTO_W
<      *
<      * @param n         the pushed integer constant.
<      */
<     public void addGotoW(int n) {
<     	addOpcode(GOTO_W);
<     	add32bit(n);
diff -r E:\deadlock_preventer\javassist\src/javassist/bytecode/CodeAttribute.java E:\downloads\javassist-3.12.GA\javassist-3.12.GA\src\main/javassist/bytecode/CodeAttribute.java
581,584d580
< 
< 	public void removeAttribute(String tag) {
<         AttributeInfo.remove(attributes, tag);
< 	}
diff -r E:\deadlock_preventer\javassist\src/javassist/bytecode/Descriptor.java E:\downloads\javassist-3.12.GA\javassist-3.12.GA\src\main/javassist/bytecode/Descriptor.java
472,480d471
<     public static boolean isPrimitiveReturnType(String desc) {
<         int i = desc.indexOf(')');
<         if (i < 0)
<             return false;
<         else {
<         	return isPrimitive(desc, i+ 1);
<         }
<     }
<     
559,573d549
< 
< 	private static boolean isPrimitive(String desc, int i) {
< 		char c = desc.charAt(i);
< 		if (c == '[')
< 			return false;
< 
< 		if (c == 'L')
< 			return false;
< 
< 		CtClass type = toPrimitiveClass(c);
< 		if (type == null)
< 			return false; // error
< 
< 		return true;
< 	}
diff -r E:\deadlock_preventer\javassist\src/javassist/bytecode/LineNumberAttribute.java E:\downloads\javassist-3.12.GA\javassist-3.12.GA\src\main/javassist/bytecode/LineNumberAttribute.java
181,198d180
<     
<     public void includeZeroPc() {
<         int n = tableLength();
<         if (n > 0) {
<             int line = ByteArray.readU16bit(info, 4);
< 
<             int num = info.length;
<             byte[] tmp = new byte[num + 4];
<             for (int i = 2; i < num; i++)
<             	tmp[i + 4] = info[i];
< 
<             info = tmp;
<             ByteArray.write16bit(n + 1, info, 0);
< 
<             ByteArray.write16bit(0, info, 2);
<             ByteArray.write16bit(line - 1, info, 4);
<         }
<     }
Only in E:\downloads\javassist-3.12.GA\javassist-3.12.GA\src\main/javassist/util: HotSwapper.java
Only in E:\deadlock_preventer\javassist\src/javassist/util: HotSwapper.java.disable
